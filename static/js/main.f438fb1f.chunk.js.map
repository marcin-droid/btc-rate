{"version":3,"sources":["CryptoList.js","Crypto.js","App.js","serviceWorker.js","index.js"],"names":["CryptoList","props","listItems","list","map","item","key","currency","className","colorClass","last","symbol","Crypto","getData","axios","get","then","response","bufor","cryptoArray","i","data","undefined","state","crypto","cryptoObj","push","setState","filteredCrypto","filtrCrypto","filtered","filter","el","toUpperCase","includes","filterInput","value","this","timer","setInterval","placeholder","onChange","ref","input","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4SAYeA,EAVI,SAACC,GAEhB,IAAMC,EAAYD,EAAME,KAAKC,KAAI,SAACC,GAAD,OACnC,wBAAIC,IAAKD,EAAKE,UAAd,cAAmC,0BAAMC,UAAWH,EAAKI,YAAaJ,EAAKK,MAA3E,IAAyFL,EAAKE,SAA9F,KAA0GF,EAAKM,OAA/G,QAEE,OAAO,4BACFT,ICuDMU,E,YA1DX,aAAc,IAAD,8BACT,+CAUJC,QAAU,WACNC,IACCC,IADD,qCAECC,MAAK,SAAAC,GACF,IAEIC,EAFAC,EAAc,GACdC,EAAI,EAER,IAAI,IAAId,KAAOW,EAASI,KACxB,MAC+BC,IAAvB,EAAKC,MAAMC,OAAOJ,KAAgBF,EAAQ,EAAKK,MAAMC,OAAOJ,GAAGV,MAEnE,IAAIe,EAAY,CACZf,KAAMO,EAASI,KAAKf,GAAKI,KACzBC,OAAQM,EAASI,KAAKf,GAAKK,OAC3BJ,SAAUD,EACVG,WAAYS,EAAMD,EAASI,KAAKf,GAAKI,KAAO,QAASQ,EAAMD,EAASI,KAAKf,GAAKI,KAAO,MAAM,QAE/FU,IACAD,EAAYO,KAAKD,GAErB,EAAKE,SAAS,CACVH,OAAQL,EACRS,eAAgBT,IAEpB,EAAKU,kBAnCA,EAwCbA,YAAc,WACV,IAAIC,EAAW,EAAKP,MAAMC,OAAOO,QAAO,SAAAC,GACtC,OAAOA,EAAGzB,SAAS0B,cAAcC,SAAS,EAAKC,YAAYC,MAAMH,kBAEpE,EAAKN,SAAS,CAACC,eAAgBE,KA1C9B,EAAKP,MAAO,CACRC,OAAQ,GACRI,eAAgB,IAJX,E,iFAQTS,KAAKxB,UACLwB,KAAKC,MAAQC,YAAYF,KAAKxB,QAAS,O,+BAsCtC,IAAD,OACJ,OACI,6BACI,uCACA,2BAAO2B,YAAY,cAAcC,SAAUJ,KAAKR,YAAaa,IAAK,SAAAC,GAAK,OAAI,EAAKR,YAAcQ,KAC9F,kBAAC,EAAD,CAAYxC,KAAMkC,KAAKd,MAAMK,sB,GArDpBgB,aCQNC,MARf,WACE,OACE,yBAAKrC,UAAU,OACb,kBAAC,EAAD,QCKcsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,MAAK,SAAA0C,GACjCA,EAAaC,kB","file":"static/js/main.f438fb1f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CryptoList = (props) => {\r\n    \r\n    const listItems = props.list.map((item) =>\r\n  <li key={item.currency}>Last rate: <span className={item.colorClass}>{item.last}</span> {item.currency} [{item.symbol}]</li>);\r\n\r\n    return <ul>\r\n        {listItems}\r\n    </ul>\r\n}\r\n\r\nexport default CryptoList","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport CryptoList from './CryptoList';\r\n\r\nclass Crypto extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state= {\r\n            crypto: [],\r\n            filteredCrypto: []\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.getData();\r\n        this.timer = setInterval(this.getData, 4000);\r\n    }\r\n    getData = () => {\r\n        axios\r\n        .get(`https://blockchain.info/pl/ticker`)\r\n        .then(response => {\r\n            let cryptoArray = [];\r\n            let i = 0;\r\n            let bufor;\r\n            for(let key in response.data)\r\n            {    \r\n                if (this.state.crypto[i]!==undefined){bufor = this.state.crypto[i].last}\r\n\r\n                let cryptoObj = {\r\n                    last: response.data[key].last,\r\n                    symbol: response.data[key].symbol,\r\n                    currency: key,\r\n                    colorClass: bufor<response.data[key].last ? 'green':(bufor>response.data[key].last ? 'red':'blue')\r\n                }\r\n                i++;\r\n                cryptoArray.push(cryptoObj)\r\n            }\r\n            this.setState({\r\n                crypto: cryptoArray,\r\n                filteredCrypto: cryptoArray\r\n            })\r\n            this.filtrCrypto();\r\n        })\r\n        \r\n    }\r\n\r\n    filtrCrypto = () => {\r\n        let filtered = this.state.crypto.filter(el=>{\r\n          return el.currency.toUpperCase().includes(this.filterInput.value.toUpperCase());\r\n        })\r\n       this.setState({filteredCrypto: filtered})\r\n    }\r\n    \r\nrender(){\r\n    return (\r\n        <div>   \r\n            <h2>Crypton</h2>\r\n            <input placeholder=\"Przefiltruj\" onChange={this.filtrCrypto} ref={input => this.filterInput = input}></input>\r\n            <CryptoList list={this.state.filteredCrypto}/>\r\n        </div>\r\n        )\r\n    } \r\n}\r\n\r\nexport default Crypto","import React from 'react';\nimport './App.css';\nimport Crypto from \"./Crypto\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Crypto/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}